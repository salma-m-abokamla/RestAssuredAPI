<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="4" ignored="0" total="22" passed="18">
  <reporter-output>
  </reporter-output>
  <suite name="testBeforeSuite" duration-ms="59725" started-at="2020-06-11T17:34:28Z" finished-at="2020-06-11T17:35:27Z">
    <groups>
    </groups>
    <test name="Tes1" duration-ms="59725" started-at="2020-06-11T17:34:28Z" finished-at="2020-06-11T17:35:27Z">
      <class name="RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeSuite" is-config="true" duration-ms="42" started-at="2020-06-11T17:34:28Z" finished-at="2020-06-11T17:34:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="177" started-at="2020-06-11T17:34:28Z" finished-at="2020-06-11T17:34:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.AppConfig()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="AppConfig()[pri:1, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="AppConfig" duration-ms="3394" started-at="2020-06-11T17:34:28Z" finished-at="2020-06-11T17:34:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AppConfig -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="228" started-at="2020-06-11T17:34:31Z" finished-at="2020-06-11T17:34:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AppConfig status=SUCCESS method=MVA10APIs_Suite.AppConfig()[pri:1, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:34:32Z" finished-at="2020-06-11T17:34:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.HanSolo()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="HanSolo()[pri:2, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="HanSolo" duration-ms="1323" started-at="2020-06-11T17:34:32Z" finished-at="2020-06-11T17:34:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- HanSolo -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="36" started-at="2020-06-11T17:34:33Z" finished-at="2020-06-11T17:34:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=HanSolo status=SUCCESS method=MVA10APIs_Suite.HanSolo()[pri:2, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:34:33Z" finished-at="2020-06-11T17:34:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SoftToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="SoftToken()[pri:3, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="SoftToken" duration-ms="14754" started-at="2020-06-11T17:34:33Z" finished-at="2020-06-11T17:34:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SoftToken -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="36" started-at="2020-06-11T17:34:48Z" finished-at="2020-06-11T17:34:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SoftToken status=SUCCESS method=MVA10APIs_Suite.SoftToken()[pri:3, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:34:48Z" finished-at="2020-06-11T17:34:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Segment()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Segment()[pri:4, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="Segment" duration-ms="2160" started-at="2020-06-11T17:34:48Z" finished-at="2020-06-11T17:34:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Segment -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="32" started-at="2020-06-11T17:34:50Z" finished-at="2020-06-11T17:34:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Segment status=SUCCESS method=MVA10APIs_Suite.Segment()[pri:4, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:34:50Z" finished-at="2020-06-11T17:34:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SubsConfigWithoutSegment()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="SubsConfigWithoutSegment()[pri:5, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="SubsConfigWithoutSegment" duration-ms="1653" started-at="2020-06-11T17:34:50Z" finished-at="2020-06-11T17:34:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubsConfigWithoutSegment -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="53" started-at="2020-06-11T17:34:52Z" finished-at="2020-06-11T17:34:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubsConfigWithoutSegment status=SUCCESS method=MVA10APIs_Suite.SubsConfigWithoutSegment()[pri:5, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="FAIL" signature="Dashboard(java.lang.String, java.lang.String, java.lang.String)[pri:6, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="Dashboard" duration-ms="0" started-at="2020-06-11T17:34:52Z" finished-at="2020-06-11T17:34:52Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Cannot inject @Test annotated Method [Dashboard] with [class java.lang.String, class java.lang.String, class java.lang.String].
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Cannot inject @Test annotated Method [Dashboard] with [class java.lang.String, class java.lang.String, class java.lang.String].
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection
at org.testng.internal.Parameters.checkParameterTypes(Parameters.java:407)
at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:356)
at org.testng.internal.Parameters.createParameters(Parameters.java:635)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.ParameterHandler.handleParameters(ParameterHandler.java:49)
at org.testng.internal.ParameterHandler.createParameters(ParameterHandler.java:37)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:924)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Dashboard -->
        <test-method status="PASS" signature="SubsConfigWithSegment()[pri:7, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="SubsConfigWithSegment" duration-ms="724" started-at="2020-06-11T17:34:52Z" finished-at="2020-06-11T17:34:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubsConfigWithSegment -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:34:52Z" finished-at="2020-06-11T17:34:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SubsConfigWithSegment()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="40" started-at="2020-06-11T17:34:52Z" finished-at="2020-06-11T17:34:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubsConfigWithSegment status=SUCCESS method=MVA10APIs_Suite.SubsConfigWithSegment()[pri:7, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:34:52Z" finished-at="2020-06-11T17:34:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.VeryMe()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="VeryMe()[pri:8, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="VeryMe" duration-ms="1647" started-at="2020-06-11T17:34:52Z" finished-at="2020-06-11T17:34:54Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <401>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <401>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.VeryMe(MVA10APIs_Suite.java:256)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VeryMe -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="41" started-at="2020-06-11T17:34:54Z" finished-at="2020-06-11T17:34:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VeryMe status=FAILURE method=MVA10APIs_Suite.VeryMe()[pri:8, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:34:54Z" finished-at="2020-06-11T17:34:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Discover()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="Discover()[pri:9, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="Discover" duration-ms="8844" started-at="2020-06-11T17:34:54Z" finished-at="2020-06-11T17:35:03Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <500>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Discover(MVA10APIs_Suite.java:277)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Discover -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="36" started-at="2020-06-11T17:35:03Z" finished-at="2020-06-11T17:35:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Discover status=FAILURE method=MVA10APIs_Suite.Discover()[pri:9, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="ProductsAndServices()[pri:10, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="ProductsAndServices" duration-ms="3336" started-at="2020-06-11T17:35:03Z" finished-at="2020-06-11T17:35:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ProductsAndServices -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:03Z" finished-at="2020-06-11T17:35:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.ProductsAndServices()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="28" started-at="2020-06-11T17:35:06Z" finished-at="2020-06-11T17:35:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ProductsAndServices status=SUCCESS method=MVA10APIs_Suite.ProductsAndServices()[pri:10, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="FAIL" signature="BillHistory()[pri:11, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="BillHistory" duration-ms="784" started-at="2020-06-11T17:35:06Z" finished-at="2020-06-11T17:35:07Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <500>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.BillHistory(MVA10APIs_Suite.java:319)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BillHistory -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:06Z" finished-at="2020-06-11T17:35:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.BillHistory()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="26" started-at="2020-06-11T17:35:07Z" finished-at="2020-06-11T17:35:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BillHistory status=FAILURE method=MVA10APIs_Suite.BillHistory()[pri:11, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:07Z" finished-at="2020-06-11T17:35:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Plan()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Plan()[pri:12, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="Plan" duration-ms="2080" started-at="2020-06-11T17:35:07Z" finished-at="2020-06-11T17:35:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Plan -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="25" started-at="2020-06-11T17:35:09Z" finished-at="2020-06-11T17:35:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Plan status=SUCCESS method=MVA10APIs_Suite.Plan()[pri:12, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:35:09Z" finished-at="2020-06-11T17:35:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Usages()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Usages()[pri:13, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="Usages" duration-ms="713" started-at="2020-06-11T17:35:09Z" finished-at="2020-06-11T17:35:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Usages -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="22" started-at="2020-06-11T17:35:10Z" finished-at="2020-06-11T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Usages status=SUCCESS method=MVA10APIs_Suite.Usages()[pri:13, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:10Z" finished-at="2020-06-11T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Extras()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Extras()[pri:14, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="Extras" duration-ms="730" started-at="2020-06-11T17:35:10Z" finished-at="2020-06-11T17:35:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Extras -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="26" started-at="2020-06-11T17:35:11Z" finished-at="2020-06-11T17:35:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Extras status=SUCCESS method=MVA10APIs_Suite.Extras()[pri:14, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="CurrentCharges()[pri:15, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="CurrentCharges" duration-ms="883" started-at="2020-06-11T17:35:11Z" finished-at="2020-06-11T17:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CurrentCharges -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:11Z" finished-at="2020-06-11T17:35:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.CurrentCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="23" started-at="2020-06-11T17:35:12Z" finished-at="2020-06-11T17:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CurrentCharges status=SUCCESS method=MVA10APIs_Suite.CurrentCharges()[pri:15, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="AdditionalCharges()[pri:16, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="AdditionalCharges" duration-ms="2718" started-at="2020-06-11T17:35:12Z" finished-at="2020-06-11T17:35:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AdditionalCharges -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:12Z" finished-at="2020-06-11T17:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.AdditionalCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="27" started-at="2020-06-11T17:35:14Z" finished-at="2020-06-11T17:35:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AdditionalCharges status=SUCCESS method=MVA10APIs_Suite.AdditionalCharges()[pri:16, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Upgrades()[pri:17, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="Upgrades" duration-ms="1897" started-at="2020-06-11T17:35:14Z" finished-at="2020-06-11T17:35:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Upgrades -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:14Z" finished-at="2020-06-11T17:35:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Upgrades()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="31" started-at="2020-06-11T17:35:16Z" finished-at="2020-06-11T17:35:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Upgrades status=SUCCESS method=MVA10APIs_Suite.Upgrades()[pri:17, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:35:16Z" finished-at="2020-06-11T17:35:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.VOV()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="VOV()[pri:18, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="VOV" duration-ms="805" started-at="2020-06-11T17:35:16Z" finished-at="2020-06-11T17:35:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VOV -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="32" started-at="2020-06-11T17:35:17Z" finished-at="2020-06-11T17:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VOV status=SUCCESS method=MVA10APIs_Suite.VOV()[pri:18, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:35:17Z" finished-at="2020-06-11T17:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.PasswordLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="PasswordLogin()[pri:19, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="PasswordLogin" duration-ms="6629" started-at="2020-06-11T17:35:17Z" finished-at="2020-06-11T17:35:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PasswordLogin -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="15" started-at="2020-06-11T17:35:24Z" finished-at="2020-06-11T17:35:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PasswordLogin status=SUCCESS method=MVA10APIs_Suite.PasswordLogin()[pri:19, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-11T17:35:24Z" finished-at="2020-06-11T17:35:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.GetAccounts()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="GetAccounts()[pri:20, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="GetAccounts" duration-ms="1162" started-at="2020-06-11T17:35:24Z" finished-at="2020-06-11T17:35:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetAccounts -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="16" started-at="2020-06-11T17:35:25Z" finished-at="2020-06-11T17:35:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAccounts status=SUCCESS method=MVA10APIs_Suite.GetAccounts()[pri:20, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:25Z" finished-at="2020-06-11T17:35:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.GetSubscriptionsList() throws java.net.MalformedURLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="GetSubscriptionsList()[pri:21, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="GetSubscriptionsList" duration-ms="1138" started-at="2020-06-11T17:35:25Z" finished-at="2020-06-11T17:35:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetSubscriptionsList -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="44" started-at="2020-06-11T17:35:26Z" finished-at="2020-06-11T17:35:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetSubscriptionsList status=SUCCESS method=MVA10APIs_Suite.GetSubscriptionsList()[pri:21, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-11T17:35:26Z" finished-at="2020-06-11T17:35:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SubscriptionSwitch()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="SubscriptionSwitch()[pri:22, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="SubscriptionSwitch" duration-ms="1234" started-at="2020-06-11T17:35:26Z" finished-at="2020-06-11T17:35:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubscriptionSwitch -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac]" name="afterMethod" is-config="true" duration-ms="38" started-at="2020-06-11T17:35:27Z" finished-at="2020-06-11T17:35:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubscriptionSwitch status=SUCCESS method=MVA10APIs_Suite.SubscriptionSwitch()[pri:22, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@7d907bac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite -->
    </test> <!-- Tes1 -->
  </suite> <!-- testBeforeSuite -->
</testng-results>
