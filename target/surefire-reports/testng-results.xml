<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="0" total="22" passed="19">
  <reporter-output>
  </reporter-output>
  <suite name="testBeforeSuite" duration-ms="123001" started-at="2020-06-18T12:32:29Z" finished-at="2020-06-18T12:34:32Z">
    <groups>
    </groups>
    <test name="Tes1" duration-ms="123001" started-at="2020-06-18T12:32:29Z" finished-at="2020-06-18T12:34:32Z">
      <class name="RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeSuite" is-config="true" duration-ms="38" started-at="2020-06-18T12:32:29Z" finished-at="2020-06-18T12:32:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="184" started-at="2020-06-18T12:32:29Z" finished-at="2020-06-18T12:32:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.AppConfig()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="AppConfig()[pri:1, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="AppConfig" duration-ms="62893" started-at="2020-06-18T12:32:29Z" finished-at="2020-06-18T12:33:32Z">
          <exception class="javax.net.ssl.SSLHandshakeException">
            <message>
              <![CDATA[Remote host closed connection during handshake]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake
at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1002)
at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1385)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1413)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1397)
at org.apache.http.conn.ssl.SSLSocketFactory.createLayeredSocket(SSLSocketFactory.java:573)
at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:557)
at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:414)
at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)
at org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)
at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)
at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)
at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
at org.apache.http.client.HttpClient$execute$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:133)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)
at io.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)
at io.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)
at io.restassured.internal.http.HTTPBuilder$request$2.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
at io.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1212)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:812)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:48)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:58)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1221)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1212)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:812)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:48)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:149)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:133)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1631)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1212)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:812)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:48)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:58)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:182)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1637)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1212)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:812)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:48)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:58)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:182)
at io.restassured.internal.RequestSpecificationImpl.get(RequestSpecificationImpl.groovy:166)
at io.restassured.internal.RequestSpecificationImpl.get(RequestSpecificationImpl.groovy)
at RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.AppConfig(MVA10APIs_Suite.java:103)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
Caused by: java.io.EOFException: SSL peer shut down incorrectly
at sun.security.ssl.InputRecord.read(InputRecord.java:505)
at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:983)
... 132 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.net.ssl.SSLHandshakeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AppConfig -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="265" started-at="2020-06-18T12:33:32Z" finished-at="2020-06-18T12:33:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AppConfig status=FAILURE method=MVA10APIs_Suite.AppConfig()[pri:1, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:32Z" finished-at="2020-06-18T12:33:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.HanSolo()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="HanSolo()[pri:2, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="HanSolo" duration-ms="2517" started-at="2020-06-18T12:33:32Z" finished-at="2020-06-18T12:33:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- HanSolo -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="38" started-at="2020-06-18T12:33:35Z" finished-at="2020-06-18T12:33:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=HanSolo status=SUCCESS method=MVA10APIs_Suite.HanSolo()[pri:2, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="SoftToken()[pri:3, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="SoftToken" duration-ms="5939" started-at="2020-06-18T12:33:35Z" finished-at="2020-06-18T12:33:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SoftToken -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:35Z" finished-at="2020-06-18T12:33:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SoftToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="24" started-at="2020-06-18T12:33:41Z" finished-at="2020-06-18T12:33:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SoftToken status=SUCCESS method=MVA10APIs_Suite.SoftToken()[pri:3, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:41Z" finished-at="2020-06-18T12:33:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Segment()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Segment()[pri:4, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="Segment" duration-ms="2264" started-at="2020-06-18T12:33:41Z" finished-at="2020-06-18T12:33:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Segment -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="33" started-at="2020-06-18T12:33:43Z" finished-at="2020-06-18T12:33:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Segment status=SUCCESS method=MVA10APIs_Suite.Segment()[pri:4, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:43Z" finished-at="2020-06-18T12:33:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SubsConfigWithoutSegment()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="SubsConfigWithoutSegment()[pri:5, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="SubsConfigWithoutSegment" duration-ms="2136" started-at="2020-06-18T12:33:43Z" finished-at="2020-06-18T12:33:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubsConfigWithoutSegment -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="24" started-at="2020-06-18T12:33:45Z" finished-at="2020-06-18T12:33:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubsConfigWithoutSegment status=SUCCESS method=MVA10APIs_Suite.SubsConfigWithoutSegment()[pri:5, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:45Z" finished-at="2020-06-18T12:33:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Dashboard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Dashboard()[pri:6, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="Dashboard" duration-ms="4775" started-at="2020-06-18T12:33:45Z" finished-at="2020-06-18T12:33:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Dashboard -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="41" started-at="2020-06-18T12:33:50Z" finished-at="2020-06-18T12:33:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Dashboard status=SUCCESS method=MVA10APIs_Suite.Dashboard()[pri:6, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:50Z" finished-at="2020-06-18T12:33:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SubsConfigWithSegment()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="SubsConfigWithSegment()[pri:7, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="SubsConfigWithSegment" duration-ms="1090" started-at="2020-06-18T12:33:50Z" finished-at="2020-06-18T12:33:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubsConfigWithSegment -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="57" started-at="2020-06-18T12:33:51Z" finished-at="2020-06-18T12:33:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubsConfigWithSegment status=SUCCESS method=MVA10APIs_Suite.SubsConfigWithSegment()[pri:7, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:51Z" finished-at="2020-06-18T12:33:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.VeryMe()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="VeryMe()[pri:8, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="VeryMe" duration-ms="1736" started-at="2020-06-18T12:33:51Z" finished-at="2020-06-18T12:33:53Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> doesn't match actual status code <401>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> doesn't match actual status code <401>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:451)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:613)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:120)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:128)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:117)
at RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.VeryMe(MVA10APIs_Suite.java:256)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VeryMe -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="26" started-at="2020-06-18T12:33:53Z" finished-at="2020-06-18T12:33:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VeryMe status=FAILURE method=MVA10APIs_Suite.VeryMe()[pri:8, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:53Z" finished-at="2020-06-18T12:33:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Discover()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Discover()[pri:9, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="Discover" duration-ms="2134" started-at="2020-06-18T12:33:53Z" finished-at="2020-06-18T12:33:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Discover -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="27" started-at="2020-06-18T12:33:55Z" finished-at="2020-06-18T12:33:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Discover status=SUCCESS method=MVA10APIs_Suite.Discover()[pri:9, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="ProductsAndServices()[pri:10, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="ProductsAndServices" duration-ms="1688" started-at="2020-06-18T12:33:55Z" finished-at="2020-06-18T12:33:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ProductsAndServices -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:55Z" finished-at="2020-06-18T12:33:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.ProductsAndServices()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="24" started-at="2020-06-18T12:33:57Z" finished-at="2020-06-18T12:33:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ProductsAndServices status=SUCCESS method=MVA10APIs_Suite.ProductsAndServices()[pri:10, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:57Z" finished-at="2020-06-18T12:33:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.BillHistory()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="BillHistory()[pri:11, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="BillHistory" duration-ms="2582" started-at="2020-06-18T12:33:57Z" finished-at="2020-06-18T12:33:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BillHistory -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="38" started-at="2020-06-18T12:33:59Z" finished-at="2020-06-18T12:33:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BillHistory status=SUCCESS method=MVA10APIs_Suite.BillHistory()[pri:11, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Plan()[pri:12, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="Plan" duration-ms="3804" started-at="2020-06-18T12:33:59Z" finished-at="2020-06-18T12:34:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Plan -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:33:59Z" finished-at="2020-06-18T12:33:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Plan()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="22" started-at="2020-06-18T12:34:03Z" finished-at="2020-06-18T12:34:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Plan status=SUCCESS method=MVA10APIs_Suite.Plan()[pri:12, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Usages()[pri:13, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="Usages" duration-ms="1673" started-at="2020-06-18T12:34:03Z" finished-at="2020-06-18T12:34:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Usages -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:03Z" finished-at="2020-06-18T12:34:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Usages()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="45" started-at="2020-06-18T12:34:05Z" finished-at="2020-06-18T12:34:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Usages status=SUCCESS method=MVA10APIs_Suite.Usages()[pri:13, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-18T12:34:05Z" finished-at="2020-06-18T12:34:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Extras()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Extras()[pri:14, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="Extras" duration-ms="2067" started-at="2020-06-18T12:34:05Z" finished-at="2020-06-18T12:34:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Extras -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="27" started-at="2020-06-18T12:34:07Z" finished-at="2020-06-18T12:34:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Extras status=SUCCESS method=MVA10APIs_Suite.Extras()[pri:14, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="FAIL" signature="CurrentCharges()[pri:15, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="CurrentCharges" duration-ms="2253" started-at="2020-06-18T12:34:07Z" finished-at="2020-06-18T12:34:09Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> doesn't match actual status code <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> doesn't match actual status code <500>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:451)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:613)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:120)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:128)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:117)
at RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.CurrentCharges(MVA10APIs_Suite.java:401)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CurrentCharges -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:07Z" finished-at="2020-06-18T12:34:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.CurrentCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="61" started-at="2020-06-18T12:34:09Z" finished-at="2020-06-18T12:34:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CurrentCharges status=FAILURE method=MVA10APIs_Suite.CurrentCharges()[pri:15, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:09Z" finished-at="2020-06-18T12:34:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.AdditionalCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="AdditionalCharges()[pri:16, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="AdditionalCharges" duration-ms="4602" started-at="2020-06-18T12:34:09Z" finished-at="2020-06-18T12:34:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AdditionalCharges -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="62" started-at="2020-06-18T12:34:14Z" finished-at="2020-06-18T12:34:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AdditionalCharges status=SUCCESS method=MVA10APIs_Suite.AdditionalCharges()[pri:16, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-06-18T12:34:14Z" finished-at="2020-06-18T12:34:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.Upgrades()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Upgrades()[pri:17, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="Upgrades" duration-ms="3362" started-at="2020-06-18T12:34:14Z" finished-at="2020-06-18T12:34:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Upgrades -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="19" started-at="2020-06-18T12:34:17Z" finished-at="2020-06-18T12:34:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Upgrades status=SUCCESS method=MVA10APIs_Suite.Upgrades()[pri:17, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="VOV()[pri:18, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="VOV" duration-ms="1785" started-at="2020-06-18T12:34:17Z" finished-at="2020-06-18T12:34:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VOV -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:17Z" finished-at="2020-06-18T12:34:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.VOV()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="19" started-at="2020-06-18T12:34:19Z" finished-at="2020-06-18T12:34:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VOV status=SUCCESS method=MVA10APIs_Suite.VOV()[pri:18, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="PasswordLogin()[pri:19, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="PasswordLogin" duration-ms="7023" started-at="2020-06-18T12:34:19Z" finished-at="2020-06-18T12:34:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PasswordLogin -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:19Z" finished-at="2020-06-18T12:34:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.PasswordLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="21" started-at="2020-06-18T12:34:26Z" finished-at="2020-06-18T12:34:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PasswordLogin status=SUCCESS method=MVA10APIs_Suite.PasswordLogin()[pri:19, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="GetAccounts()[pri:20, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="GetAccounts" duration-ms="1636" started-at="2020-06-18T12:34:26Z" finished-at="2020-06-18T12:34:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetAccounts -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:26Z" finished-at="2020-06-18T12:34:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.GetAccounts()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="17" started-at="2020-06-18T12:34:28Z" finished-at="2020-06-18T12:34:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAccounts status=SUCCESS method=MVA10APIs_Suite.GetAccounts()[pri:20, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="GetSubscriptionsList()[pri:21, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="GetSubscriptionsList" duration-ms="1882" started-at="2020-06-18T12:34:28Z" finished-at="2020-06-18T12:34:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetSubscriptionsList -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:28Z" finished-at="2020-06-18T12:34:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.GetSubscriptionsList() throws java.net.MalformedURLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="26" started-at="2020-06-18T12:34:30Z" finished-at="2020-06-18T12:34:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetSubscriptionsList status=SUCCESS method=MVA10APIs_Suite.GetSubscriptionsList()[pri:21, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-06-18T12:34:30Z" finished-at="2020-06-18T12:34:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite.SubscriptionSwitch()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="SubscriptionSwitch()[pri:22, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="SubscriptionSwitch" duration-ms="1905" started-at="2020-06-18T12:34:30Z" finished-at="2020-06-18T12:34:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubscriptionSwitch -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55]" name="afterMethod" is-config="true" duration-ms="30" started-at="2020-06-18T12:34:32Z" finished-at="2020-06-18T12:34:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubscriptionSwitch status=SUCCESS method=MVA10APIs_Suite.SubscriptionSwitch()[pri:22, instance:RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite@69d9c55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- RestAssuredDemo.RestAssuredDemo.MVA10APIs_Suite -->
    </test> <!-- Tes1 -->
  </suite> <!-- testBeforeSuite -->
</testng-results>
